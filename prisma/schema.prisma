generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            Int             @id @default(autoincrement())
  username      String          @unique @db.VarChar(100)
  password      String          @db.VarChar(255)
  name          String          @db.VarChar(150)
  email         String          @unique @db.VarChar(200)
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  updated_at    DateTime        @default(now()) @db.Timestamptz(6)
  notifications notifications[]
  protocols     protocols[]
}

model protocols {
  id            Int                     @id @default(autoincrement())
  cnpj          String                  @db.VarChar(20)
  type          protocol_type
  status        protocol_status
  user_id       Int
  created_at    DateTime                @default(now()) @db.Timestamptz(6)
  updated_at    DateTime                @default(now()) @db.Timestamptz(6)
  logs          logs[]
  notifications protocol_notification[]
  user          users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  id             Int                     @id @default(autoincrement())
  account_id     String                  @db.VarChar(100)
  agreement_id   String                  @db.VarChar(100)
  integration_id String                  @db.VarChar(100)
  status         notification_status
  emmited_at     DateTime                @db.Timestamptz(6)
  created_at     DateTime                @default(now()) @db.Timestamptz(6)
  user_id        Int
  user           users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  protocols      protocol_notification[]
}

model protocol_notification {
  id              Int           @id @default(autoincrement())
  protocol_id     Int
  notification_id Int
  notification    notifications @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  protocol        protocols     @relation(fields: [protocol_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model logs {
  id          Int       @id @default(autoincrement())
  protocol_id Int
  date        DateTime  @default(now()) @db.Timestamptz(6)
  event       log_event
  details     String?
  protocol    protocols @relation(fields: [protocol_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum notification_status {
  PENDING
  SENT
  FAILED
}

enum protocol_type {
  EMAIL
  WEBHOOK
}

enum protocol_status {
  OPEN
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum log_event {
  CREATED
  REPROCESSED
  CANCELLED
  ERROR
}
